N Auqtzyz.EXTRA_COMP_LOOP
C |- (!H. (!p. (!n. (!i. (!j. (((~ (((node H) (p i)) = ((node H) (p j)))) /\ ((i <= n) /\ ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m)))))))) ==> (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))))))))
T c==> c/\ c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c/\ c<= f2 f4 c/\ c<= f3 f4 c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D FUN_EQ_THM
A |- (!f. (!g. ((f = g) = (!x. ((f x) = (g x))))))
T c= c= f0 f1 ! c= * f0 b0 * f1 b0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D ADD1
A |- (!m. ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D DIVISION
A |- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((m = (((m DIV n) * n) + (m MOD n))) /\ ((m MOD n) < n)))))
T c==> c~ c= f0 cNUMERAL c_0 c/\ c= f1 c+ c* cDIV f1 f0 f0 cMOD f1 f0 c< cMOD f1 f0 f0
D DIVISION_SIMP
A |- ((!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((((m DIV n) * n) + (m MOD n)) = m)))) /\ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))))
T c/\ ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* cDIV b0 b1 b1 cMOD b0 b1 b0 ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_eq
A |- (!x. (!y. ((x = y) = ((real_of_int x) = (real_of_int y)))))
T c= c= f0 f1 c= creal_of_int f0 creal_of_int f1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_LT_DISCRETE
A |- (!x. (!y. (((int_lt x) y) = ((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y))))
T c= cint_lt f0 f1 cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1
D INT_NOT_LE
A |- (!x. (!y. ((~ ((int_le x) y)) = ((int_lt y) x))))
T c= c~ cint_le f0 f1 cint_lt f1 f0
D INT_NOT_LT
A |- (!x. (!y. ((~ ((int_lt x) y)) = ((int_le y) x))))
T c= c~ cint_lt f0 f1 cint_le f1 f0
D INT_OF_NUM_ADD
A |- (!m. (!n. (((int_add (int_of_num m)) (int_of_num n)) = (int_of_num (m + n)))))
T c= cint_add cint_of_num f0 cint_of_num f1 cint_of_num c+ f0 f1
D INT_OF_NUM_EQ
A |- (!m. (!n. (((int_of_num m) = (int_of_num n)) = (m = n))))
T c= c= cint_of_num f0 cint_of_num f1 c= f0 f1
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_OF_NUM_LT
A |- (!m. (!n. (((int_lt (int_of_num m)) (int_of_num n)) = (m < n))))
T c= cint_lt cint_of_num f0 cint_of_num f1 c< f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D Misc_defs_and_lemmas.IN_ELIM_THM'
A |- ((!P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) /\ ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))))
T c/\ ! ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
D Hypermap.support_of_sequence
A |- (!n. (!p. (((support_of_sequence p) n) = (GSPEC (\GEN%PVAR%5403. (?i. (((SETSPEC GEN%PVAR%5403) (i <= n)) (p i))))))))
T c= * * part csupport_of_sequence f0 f1 * part cGSPEC / c? / cSETSPEC b0 c<= b1 f1 * f0 b1
D Hypermap.lemma_size_list
A |- (!p. (!n. (((is_inj_list p) n) ==> ((CARD ((support_of_sequence p) n)) = (SUC n)))))
T c==> cis_inj_list f0 f1 c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1
D Hypermap.is_contour
A |- (((((is_contour H) p) (NUMERAL _0)) = T) /\ ((((is_contour H) p) (SUC n)) = ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n))))))
T c/\ c= cis_contour f0 f1 cNUMERAL c_0 cT c= cis_contour f0 f1 cSUC f2 c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2
D Hypermap.lemma_inj_contour_via_list
A |- (!H. (!p. (!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n))))))
T c= cis_inj_contour f0 f1 f2 c/\ cis_contour f0 f1 f2 cis_inj_list f1 f2
D Hypermap.in_dart_of_loop
A |- (!L. (!x. (((in_dart_of_loop x) L) = (x IN (dart_of_loop L)))))
T c= cin_dart_of_loop f0 f1 cIN f0 * part cdart_of_loop f1
D Hypermap.path_of_loop
A |- (!L. (!x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x)))))
T c= cpath_of_loop f0 f1 f2 cPOWER * part cloop_map f0 f2 f1
D Hypermap.lemma_samsara_permute
A |- (!p. (!n. (((is_inj_list p) n) ==> ((permutes ((samsara p) n)) ((support_of_sequence p) n)))))
T c==> cis_inj_list f0 f1 cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1
D Hypermap.lemma_samsara_power
A |- (!p. (!n. (((is_inj_list p) n) ==> (((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j))))))))
T c==> cis_inj_list f0 f1 c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
D Hypermap.lemma_generate_loop
A |- (!p. (!n. (((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n))))))
T c==> cis_inj_list f0 f1 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= * part cloop_map cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csamsara f0 f1
D Hypermap.lemma_make_contour_loop
A |- (!H. (!p. (!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n))))))))
T c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence f1 f2 * * part csamsara f1 f2
D Oxlzlez.MOD_REFL_ALT
A |- ((~ (m = (NUMERAL _0))) ==> ((m MOD m) = (NUMERAL _0)))
T c==> c~ c= f0 cNUMERAL c_0 c= cMOD f0 f0 cNUMERAL c_0
D Auqtzyz.power_div
A |- ((((((POWER f) n) x) = x) /\ (m = ((q * n) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x)))
T c==> c/\ c= cPOWER f0 f1 f2 f2 c= f3 c+ c* f4 f1 f5 c= cPOWER f0 f3 f2 cPOWER f0 f5 f2
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m)))))), (i <= n) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c/\ c<= f3 f4 c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c==> c<= f2 f4 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
+ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) |- ((\j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) (x MOD (SUC n)))
T c==> ! c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 * / c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 cMOD f2 cSUC f0
- |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num n)) ==> ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) = ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
+ |- ((\n. (((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n))))) n)
T * / c==> cis_inj_list f0 b0 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f0 b0 * * part csamsara f0 b0 * * part csupport_of_sequence f0 b0 c= * part cloop_map cloop c, * * part csupport_of_sequence f0 b0 * * part csamsara f0 b0 * * part csamsara f0 b0 f1
+ (j <= n) |- ((j <= n) /\ ((p j) = (p j)))
T c==> c<= f0 f1 c/\ c<= f0 f1 c= * f2 f0 * f2 f0
+ |- ((m = n) = ((int_of_num m) = (int_of_num n)))
T c= c= f0 f1 c= cint_of_num f0 cint_of_num f1
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
- (!m. ((p (m MOD (SUC n))) = (p m))), ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((path_of_loop L) (p (NUMERAL _0))) = p)
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
+ |- ((\p. (!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n))))) p)
T * / ! c= cis_inj_contour f0 b0 b1 c/\ cis_contour f0 b0 b1 cis_inj_list b0 b1 f1
+ (~ (((node H) (p i)) = ((node H) (p j)))), (i <= n), (j <= n) |- ((((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))) ==> ((?y. (?z. ((y IN (dart_of_loop L)) /\ ((z IN (dart_of_loop L)) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c<= f2 f4 c==> c<= f3 f4 c==> c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f1 f4 c= * part cloop_map f5 * * part csamsara f1 f4 c/\ c? / c? / c/\ cIN b0 * part cdart_of_loop f5 c/\ cIN b1 * part cdart_of_loop f5 c~ c= * * part cnode f0 b0 * * part cnode f0 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f1 f4 c= * part cloop_map f5 * * part csamsara f1 f4
+ |- ((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) (loop (((support_of_sequence p) n) , ((samsara p) n))))
T * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ |- (((!x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x)))) ==> ((\x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x)))) x)) = ((\x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x)))) x))
T c= c==> ! ! c= cpath_of_loop f0 b0 b1 cPOWER * part cloop_map f0 b1 b0 * / ! c= cpath_of_loop f0 b0 b1 cPOWER * part cloop_map f0 b1 b0 f1 * / ! c= cpath_of_loop f0 b0 b1 cPOWER * part cloop_map f0 b1 b0 f1
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c? / c/\ cis_loop f2 b0 c/\ c= * * part cpath_of_loop b0 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f2 b1 * * part cnode f2 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f0 f1 c= * part cloop_map b0 * * part csamsara f0 f1
+ |- ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n) |- ((((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n)))) ==> ((?y. (?z. ((y IN (dart_of_loop L)) /\ ((z IN (dart_of_loop L)) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c==> c==> cis_inj_list f1 f4 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 * * part csupport_of_sequence f1 f4 c= * part cloop_map cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 * * part csamsara f1 f4 c/\ c? / c? / c/\ cIN b0 * part cdart_of_loop f5 c/\ cIN b1 * part cdart_of_loop f5 c~ c= * * part cnode f0 b0 * * part cnode f0 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f1 f4 c= * part cloop_map f5 * * part csamsara f1 f4
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num a)) ==> (((int_le (int_of_num (NUMERAL _0))) (int_of_num n)) ==> ((((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((int_le (int_of_num a)) (int_of_num n))) \/ ((~ ((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (~ ((int_le (int_of_num a)) (int_of_num n))))))) = (((int_le (int_of_num (NUMERAL _0))) (int_of_num n)) ==> ((((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((int_le (int_of_num a)) (int_of_num n))) \/ ((~ ((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (~ ((int_le (int_of_num a)) (int_of_num n)))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f1 c\/ c/\ cint_lt cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_le cint_of_num f0 cint_of_num f1 c/\ c~ cint_lt cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 c~ cint_le cint_of_num f0 cint_of_num f1 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f1 c\/ c/\ cint_lt cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_le cint_of_num f0 cint_of_num f1 c/\ c~ cint_lt cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 c~ cint_le cint_of_num f0 cint_of_num f1
+ |- ((((~ (((node H) (p i)) = ((node H) (p j)))) /\ ((i <= n) /\ ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m)))))))) ==> (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))) = T)
T c= c==> c/\ c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c/\ c<= f2 f4 c/\ c<= f3 f4 c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4 cT
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- (((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))) = (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c= c/\ c= * * part cpath_of_loop f5 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 f5 c/\ c? / c? / c/\ cin_dart_of_loop b0 f5 c/\ cin_dart_of_loop b1 f5 c~ c= * * part cnode f2 b0 * * part cnode f2 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f0 f1 c= * part cloop_map f5 * * part csamsara f0 f1 c/\ cis_loop f2 f5 c/\ c= * * part cpath_of_loop f5 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 f5 c/\ c? / c? / c/\ cin_dart_of_loop b0 f5 c/\ cin_dart_of_loop b1 f5 c~ c= * * part cnode f2 b0 * * part cnode f2 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f0 f1 c= * part cloop_map f5 * * part csamsara f0 f1
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((((m DIV n) * n) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) /\ ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* cDIV b0 b1 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c/\ ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
- |- ((\x. ((x IN (\y. (p y))) = (p x))) x)
T * / c= cIN b0 / * f0 b1 * f0 b0 f1
- |- ((((real_gt x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul f0 f1 creal_of_num cNUMERAL c_0
+ |- (((!n. ((~ (n = (NUMERAL _0))) ==> ((x = (((x DIV n) * n) + (x MOD n))) /\ ((x MOD n) < n)))) ==> ((\n. ((~ (n = (NUMERAL _0))) ==> ((x = (((x DIV n) * n) + (x MOD n))) /\ ((x MOD n) < n)))) (SUC n))) = ((\n. ((~ (n = (NUMERAL _0))) ==> ((x = (((x DIV n) * n) + (x MOD n))) /\ ((x MOD n) < n)))) (SUC n)))
T c= c==> ! c==> c~ c= b0 cNUMERAL c_0 c/\ c= f0 c+ c* cDIV f0 b0 b0 cMOD f0 b0 c< cMOD f0 b0 b0 * / c==> c~ c= b0 cNUMERAL c_0 c/\ c= f0 c+ c* cDIV f0 b0 b0 cMOD f0 b0 c< cMOD f0 b0 b0 cSUC f1 * / c==> c~ c= b0 cNUMERAL c_0 c/\ c= f0 c+ c* cDIV f0 b0 b0 cMOD f0 b0 c< cMOD f0 b0 b0 cSUC f1
+ |- (((!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n)))))) ==> ((\n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n)))))) n)) = ((\n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n)))))) n))
T c= c==> ! c==> c/\ cis_inj_contour f0 f1 b0 cone_step_contour f0 * f1 b0 * f1 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence f1 b0 * * part csamsara f1 b0 * / c==> c/\ cis_inj_contour f0 f1 b0 cone_step_contour f0 * f1 b0 * f1 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence f1 b0 * * part csamsara f1 b0 f2 * / c==> c/\ cis_inj_contour f0 f1 b0 cone_step_contour f0 * f1 b0 * f1 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence f1 b0 * * part csamsara f1 b0 f2
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
+ |- ((m < n) = ((int_lt (int_of_num m)) (int_of_num n)))
T c= c< f0 f1 cint_lt cint_of_num f0 cint_of_num f1
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((((m DIV n) * n) + (m MOD n)) = m)))) |- ((\m. (!n. ((~ (n = (NUMERAL _0))) ==> ((((m DIV n) * n) + (m MOD n)) = m)))) x)
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* cDIV b0 b1 b1 cMOD b0 b1 b0 * / ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* cDIV b0 b1 b1 cMOD b0 b1 b0 f0
- |- ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x)))))
T c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
- (!m. ((p (m MOD (SUC n))) = (p m))), ((is_inj_list p) n) |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> cis_inj_list f0 f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
+ (!m. ((p (m MOD (SUC n))) = (p m))) |- ((((p ((SUC n) MOD (SUC n))) = (p (SUC n))) ==> ((is_loop H) L)) = ((is_loop H) L))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c= c==> c= * f0 cMOD cSUC f1 cSUC f1 * f0 cSUC f1 cis_loop f2 f3 cis_loop f2 f3
+ |- ((\p. (!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n))))))) p)
T * / ! c==> c/\ cis_inj_contour f0 b0 b1 cone_step_contour f0 * b0 b1 * b0 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence b0 b1 * * part csamsara b0 b1 f1
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((p (NUMERAL _0)) = (p (SUC n))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((is_loop H) L)
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f4 c==> c= cMOD cSUC f4 cSUC f4 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c==> cis_contour f0 f1 cSUC f4 cis_loop f0 f5
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) /\ ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c/\ c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
- ((p (NUMERAL _0)) = (p (SUC n))) |- ((((path_of_loop L) (p (SUC n))) = p) = (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c= c= * * part cpath_of_loop f2 * f0 cSUC f1 f0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
+ |- (((((is_inj_list p) n) ==> ((CARD ((support_of_sequence p) n)) = (SUC n))) ==> (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))) = (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c= c==> c==> cis_inj_list f0 f1 c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
+ (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
+ |- ((i <= n) ==> ((j <= n) ==> (((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> (((is_inj_list p) n) ==> (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((p (NUMERAL _0)) = (p (SUC n))) ==> ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))))))))))
T c==> c<= f0 f1 c==> c<= f2 f1 c==> c/\ cis_contour f3 f4 f1 cone_step_contour f3 * f4 f1 * f4 cSUC f1 c==> cis_inj_list f4 f1 c==> c= cloop c, * * part csupport_of_sequence f4 f1 * * part csamsara f4 f1 f5 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c==> c= * f4 cNUMERAL c_0 * f4 cSUC f1 c/\ cis_contour f3 f4 f1 cone_step_contour f3 * f4 f1 * f4 cSUC f1
+ |- ((!j. (((~ (((node H) (p i)) = ((node H) (p j)))) /\ ((i <= n) /\ ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m)))))))) ==> (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))))))) = T)
T c= ! c==> c/\ c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 b0 c/\ c<= f2 f3 c/\ c<= b0 f3 c/\ cis_contour f0 f1 cSUC f3 c/\ cis_inj_list f1 f3 ! c= * f1 cMOD b1 cSUC f3 * f1 b1 c? / c/\ cis_loop f0 b1 c/\ c= * * part cpath_of_loop b1 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b1 c/\ c? / c? / c/\ cin_dart_of_loop b2 b1 c/\ cin_dart_of_loop b3 b1 c~ c= * * part cnode f0 b2 * * part cnode f0 b3 c/\ c= * part cdart_of_loop b1 * * part csupport_of_sequence f1 f3 c= * part cloop_map b1 * * part csamsara f1 f3 cT
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) |- (((!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m))) ==> ((\n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m))) n)) = ((\n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m))) n))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c= c==> ! c==> c~ c= b0 cNUMERAL c_0 c= c+ c* b0 cDIV f0 b0 cMOD f0 b0 f0 * / c==> c~ c= b0 cNUMERAL c_0 c= c+ c* b0 cDIV f0 b0 cMOD f0 b0 f0 f1 * / c==> c~ c= b0 cNUMERAL c_0 c= c+ c* b0 cDIV f0 b0 cMOD f0 b0 f0 f1
- |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((((m DIV n) * n) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* cDIV b0 b1 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
- |- ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)
T * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908)))))))) |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908)))))))) /\ F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1 c/\ c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> ((is_loop H) L))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 cis_loop f2 f5
- (!m. ((p (m MOD (SUC n))) = (p m))), ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((p (NUMERAL _0)) = (p (SUC n))) /\ (((path_of_loop L) (p (SUC n))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c/\ c= * f0 cNUMERAL c_0 * f0 cSUC f1 c= * * part cpath_of_loop f2 * f0 cSUC f1 f0
- |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10289925) ==> ((int_le (int_of_num (NUMERAL _0))) _10289925))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 cint_le cint_of_num cNUMERAL c_0 f0
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((dart_of_loop L) = ((support_of_sequence p) n)), (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))), (i <= n), (j <= n) |- ((?y. (?z. ((y IN (dart_of_loop L)) /\ ((z IN (dart_of_loop L)) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= * part cdart_of_loop f4 * * part csupport_of_sequence f1 f5 c==> c/\ c= * part cdart_of_loop f4 * * part csupport_of_sequence f1 f5 c= * part cloop_map f4 * * part csamsara f1 f5 c==> c<= f2 f5 c==> c<= f3 f5 c/\ c? / c? / c/\ cIN b0 * part cdart_of_loop f4 c/\ cIN b1 * part cdart_of_loop f4 c~ c= * * part cnode f0 b0 * * part cnode f0 b1 c/\ c= * part cdart_of_loop f4 * * part csupport_of_sequence f1 f5 c= * part cloop_map f4 * * part csamsara f1 f5
+ |- ((\p. (!n. (((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n)))))) p)
T * / ! c==> cis_inj_list b0 b1 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence b0 b1 * * part csamsara b0 b1 * * part csupport_of_sequence b0 b1 c= * part cloop_map cloop c, * * part csupport_of_sequence b0 b1 * * part csamsara b0 b1 * * part csamsara b0 b1 f0
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
- (((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0))) /\ (((real_add (real_of_int _10289919)) (real_of_num (NUMERAL (BIT1 _0)))) = (real_of_num (NUMERAL _0)))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0
+ (((one_step_contour H) (p n)) (p (SUC n))), (((is_contour H) p) n) |- (((is_inj_list p) n) ==> (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((p (NUMERAL _0)) = (p (SUC n))) ==> ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n))))))))
T c==> cone_step_contour f0 * f1 f2 * f1 cSUC f2 c==> cis_contour f0 f1 f2 c==> cis_inj_list f1 f2 c==> c= cloop c, * * part csupport_of_sequence f1 f2 * * part csamsara f1 f2 f3 c==> c= cMOD cSUC f2 cSUC f2 cNUMERAL c_0 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f2 c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2
- (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) /\ ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c/\ c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
+ |- (((!q. (!n. (!m. (!f. (!r. (!x. ((((((POWER f) n) x) = x) /\ (m = ((q * n) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x))))))))) ==> ((\q. (!n. (!m. (!f. (!r. (!x. ((((((POWER f) n) x) = x) /\ (m = ((q * n) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x))))))))) (x DIV (SUC n)))) = ((\q. (!n. (!m. (!f. (!r. (!x. ((((((POWER f) n) x) = x) /\ (m = ((q * n) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x))))))))) (x DIV (SUC n))))
T c= c==> ! ! ! ! ! ! c==> c/\ c= cPOWER b3 b1 b5 b5 c= b2 c+ c* b0 b1 b4 c= cPOWER b3 b2 b5 cPOWER b3 b4 b5 * / ! ! ! ! ! c==> c/\ c= cPOWER b3 b1 b5 b5 c= b2 c+ c* b0 b1 b4 c= cPOWER b3 b2 b5 cPOWER b3 b4 b5 cDIV f0 cSUC f1 * / ! ! ! ! ! c==> c/\ c= cPOWER b3 b1 b5 b5 c= b2 c+ c* b0 b1 b4 c= cPOWER b3 b2 b5 cPOWER b3 b4 b5 cDIV f0 cSUC f1
+ |- ((y = (real_of_num (NUMERAL _0))) ==> (!x. (((real_mul x) y) = (real_of_num (NUMERAL _0)))))
T c==> c= f0 creal_of_num cNUMERAL c_0 ! c= creal_mul b0 f0 creal_of_num cNUMERAL c_0
+ ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) |- (((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) ==> ((is_loop H) L)) = ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n))))) ==> ((is_loop H) L)))
T c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c= c==> c==> c/\ cis_inj_contour f3 f0 f1 cone_step_contour f3 * f0 f1 * f0 cSUC f1 cis_loop f3 f2 cis_loop f3 f2 c==> c==> c/\ cis_inj_contour f3 f0 f1 cone_step_contour f3 * f0 f1 * f0 cNUMERAL c_0 cis_loop f3 cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 cis_loop f3 f2
+ |- (((!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))) ==> ((\n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))) n)) = ((\n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))) n))
T c= c==> ! c= cis_inj_contour f0 f1 b0 c/\ cis_contour f0 f1 b0 cis_inj_list f1 b0 * / c= cis_inj_contour f0 f1 b0 c/\ cis_contour f0 f1 b0 cis_inj_list f1 b0 f2 * / c= cis_inj_contour f0 f1 b0 c/\ cis_contour f0 f1 b0 cis_inj_list f1 b0 f2
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n) |- ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c/\ c= * * part cpath_of_loop f5 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 f5 c/\ c? / c? / c/\ cin_dart_of_loop b0 f5 c/\ cin_dart_of_loop b1 f5 c~ c= * * part cnode f2 b0 * * part cnode f2 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f0 f1 c= * part cloop_map f5 * * part csamsara f0 f1
- |- (((NUMERAL _0) = (SUC n)) = F)
T c= c= cNUMERAL c_0 cSUC f0 cF
+ (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- (((((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((int_le (int_of_num a)) (int_of_num n))) \/ ((~ ((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (~ ((int_le (int_of_num a)) (int_of_num n))))) = ((a < (SUC n)) = (a <= n)))
T c= c\/ c/\ cint_lt cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_le cint_of_num f0 cint_of_num f1 c/\ c~ cint_lt cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 c~ cint_le cint_of_num f0 cint_of_num f1 c= c< f0 cSUC f1 c<= f0 f1
+ (j <= n) |- ((\i. ((i <= n) /\ ((p j) = (p i)))) j)
T c==> c<= f0 f1 * / c/\ c<= b0 f1 c= * f2 f0 * f2 b0 f0
+ |- (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L))
T c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
+ |- (((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> (((is_inj_list p) n) ==> (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((p (NUMERAL _0)) = (p (SUC n))) ==> ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))))))))
T c==> c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 c==> cis_inj_list f1 f2 c==> c= cloop c, * * part csupport_of_sequence f1 f2 * * part csamsara f1 f2 f3 c==> c= cMOD cSUC f2 cSUC f2 cNUMERAL c_0 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f2 c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2
- |- ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- (((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L) ==> (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c==> * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f5 c? / c/\ cis_loop f2 b0 c/\ c= * * part cpath_of_loop b0 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f2 b1 * * part cnode f2 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f0 f1 c= * part cloop_map b0 * * part csamsara f0 f1
- |- (T = ((NUMERAL _0) <= n))
T c= cT c<= cNUMERAL c_0 f0
+ (!m. ((p (m MOD (SUC n))) = (p m))) |- ((p ((SUC n) MOD (SUC n))) = (p (SUC n)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c= * f0 cMOD cSUC f1 cSUC f1 * f0 cSUC f1
+ |- ((\L. (!x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x))))) L)
T * / ! ! c= cpath_of_loop b0 b1 b2 cPOWER * part cloop_map b0 b2 b1 f0
+ |- ((((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (x = (((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))))
T c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= f2 c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0
- |- (T = ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))
T c= cT creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 ! c= cPOWER * part cloop_map f2 b0 * f0 cNUMERAL c_0 * f0 b0
+ |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((m = (((m DIV n) * n) + (m MOD n))) /\ ((m MOD n) < n))))) ==> ((\m. (!n. ((~ (n = (NUMERAL _0))) ==> ((m = (((m DIV n) * n) + (m MOD n))) /\ ((m MOD n) < n))))) x)) = ((\m. (!n. ((~ (n = (NUMERAL _0))) ==> ((m = (((m DIV n) * n) + (m MOD n))) /\ ((m MOD n) < n))))) x))
T c= c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c/\ c= b0 c+ c* cDIV b0 b1 b1 cMOD b0 b1 c< cMOD b0 b1 b1 * / ! c==> c~ c= b1 cNUMERAL c_0 c/\ c= b0 c+ c* cDIV b0 b1 b1 cMOD b0 b1 c< cMOD b0 b1 b1 f0 * / ! c==> c~ c= b1 cNUMERAL c_0 c/\ c= b0 c+ c* cDIV b0 b1 b1 cMOD b0 b1 c< cMOD b0 b1 b1 f0
+ |- (((!m. (!f. (!r. (!x. ((((((POWER f) (SUC n)) x) = x) /\ (m = (((x DIV (SUC n)) * (SUC n)) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x))))))) ==> ((\m. (!f. (!r. (!x. ((((((POWER f) (SUC n)) x) = x) /\ (m = (((x DIV (SUC n)) * (SUC n)) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x))))))) x)) = ((\m. (!f. (!r. (!x. ((((((POWER f) (SUC n)) x) = x) /\ (m = (((x DIV (SUC n)) * (SUC n)) + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x))))))) x))
T c= c==> ! ! ! ! c==> c/\ c= cPOWER b1 cSUC f0 b3 b3 c= b0 c+ c* cDIV f1 cSUC f0 cSUC f0 b2 c= cPOWER b1 b0 b3 cPOWER b1 b2 b3 * / ! ! ! c==> c/\ c= cPOWER b1 cSUC f0 b3 b3 c= b0 c+ c* cDIV f1 cSUC f0 cSUC f0 b2 c= cPOWER b1 b0 b3 cPOWER b1 b2 b3 f1 * / ! ! ! c==> c/\ c= cPOWER b1 cSUC f0 b3 b3 c= b0 c+ c* cDIV f1 cSUC f0 cSUC f0 b2 c= cPOWER b1 b0 b3 cPOWER b1 b2 b3 f1
+ (!m. ((p (m MOD (SUC n))) = (p m))), ((is_inj_list p) n) |- (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> cis_inj_list f0 f1 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
- ((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))), (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) |- ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) /\ ((is_loop H) L))
T c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 c==> c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 c/\ c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 cis_loop f0 f3
+ |- ((~ ((SUC n) = (NUMERAL _0))) ==> (((SUC n) MOD (SUC n)) = (NUMERAL _0)))
T c==> c~ c= cSUC f0 cNUMERAL c_0 c= cMOD cSUC f0 cSUC f0 cNUMERAL c_0
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (x = (((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= f2 c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((p (NUMERAL _0)) = (p (SUC n))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) /\ ((is_loop H) L))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f4 c==> c= cMOD cSUC f4 cSUC f4 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c==> c/\ cis_inj_contour f0 f1 f4 cone_step_contour f0 * f1 f4 * f1 cSUC f4 cis_loop f0 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c==> cis_contour f0 f1 cSUC f4 c/\ c==> c/\ cis_inj_contour f0 f1 f4 cone_step_contour f0 * f1 f4 * f1 cSUC f4 cis_loop f0 f5 cis_loop f0 f5
+ (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) ==> (((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))) ==> (((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x)))))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c<= cMOD f2 cSUC f1 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
+ |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908)))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1
+ ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((in_dart_of_loop (p (NUMERAL _0))) L)
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 cin_dart_of_loop * f0 cNUMERAL c_0 f2
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
+ |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908)))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908)))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1
+ |- ((\n. ((~ (n = (NUMERAL _0))) ==> ((x = (((x DIV n) * n) + (x MOD n))) /\ ((x MOD n) < n)))) (SUC n))
T * / c==> c~ c= b0 cNUMERAL c_0 c/\ c= f0 c+ c* cDIV f0 b0 b0 cMOD f0 b0 c< cMOD f0 b0 b0 cSUC f1
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- ((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L) |- ((((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L))) = (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))
T c==> * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2 c= c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) |- (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 ! c==> c~ c= b0 cNUMERAL c_0 c= c+ c* b0 cDIV f0 b0 cMOD f0 b0 f0
- |- ((!x. t) = t)
T c= ! f0 f0
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m))))), (i <= n), (j <= n), (((is_contour H) p) (SUC n)) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_contour f0 f1 cSUC f4 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
+ (j <= n) |- (?i. ((i <= n) /\ ((p j) = (p i))))
T c==> c<= f0 f1 c? / c/\ c<= b0 f1 c= * f2 f0 * f2 b0
+ (!m. ((p (m MOD (SUC n))) = (p m))), (((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j))))), ((is_inj_list p) n) |- (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> cis_inj_list f0 f1 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
- |- (((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) ==> ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)) = ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P))
T c= c==> ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
+ |- ((\m. (!n. ((~ (n = (NUMERAL _0))) ==> ((m = (((m DIV n) * n) + (m MOD n))) /\ ((m MOD n) < n))))) x)
T * / ! c==> c~ c= b1 cNUMERAL c_0 c/\ c= b0 c+ c* cDIV b0 b1 b1 cMOD b0 b1 c< cMOD b0 b1 b1 f0
+ |- ((\L. (!x. (((in_dart_of_loop x) L) = (x IN (dart_of_loop L))))) L)
T * / ! c= cin_dart_of_loop b1 b0 cIN b1 * part cdart_of_loop b0 f0
+ |- ((int_of_num (m + n)) = ((int_add (int_of_num m)) (int_of_num n)))
T c= cint_of_num c+ f0 f1 cint_add cint_of_num f0 cint_of_num f1
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
- (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) |- ((\j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) j)
T c==> ! c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 * / c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 f2
- (!m. ((p (m MOD (SUC n))) = (p m))), ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((p (NUMERAL _0)) = (p (SUC n))) /\ (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c/\ c= * f0 cNUMERAL c_0 * f0 cSUC f1 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
+ (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((permutes ((samsara p) n)) ((support_of_sequence p) n)), ((is_inj_list p) n) |- (((permutes ((samsara p) n)) ((support_of_sequence p) n)) /\ (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> cis_inj_list f0 f1 c/\ cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
+ |- (((((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n)))) ==> (!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x)))) = (!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x))))
T c= c==> c==> cis_inj_list f0 f1 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= * part cloop_map cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csamsara f0 f1 ! c= cPOWER * part cloop_map f2 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * part cloop_map f2 b0 * f0 cNUMERAL c_0 * f0 b0
+ |- ((\H. (!p. (!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))))) H)
T * / ! ! c= cis_inj_contour b0 b1 b2 c/\ cis_contour b0 b1 b2 cis_inj_list b1 b2 f0
+ |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0
+ ((loop_map L) = ((samsara p) n)), ((dart_of_loop L) = ((support_of_sequence p) n)) |- ((?y. (?z. ((y IN ((support_of_sequence p) n)) /\ ((z IN ((support_of_sequence p) n)) /\ (~ (((node H) y) = ((node H) z))))))) = ((?y. (?z. ((y IN (dart_of_loop L)) /\ ((z IN (dart_of_loop L)) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))
T c==> c= * part cloop_map f0 * * part csamsara f1 f2 c==> c= * part cdart_of_loop f0 * * part csupport_of_sequence f1 f2 c= c? / c? / c/\ cIN b0 * * part csupport_of_sequence f1 f2 c/\ cIN b1 * * part csupport_of_sequence f1 f2 c~ c= * * part cnode f3 b0 * * part cnode f3 b1 c/\ c? / c? / c/\ cIN b0 * part cdart_of_loop f0 c/\ cIN b1 * part cdart_of_loop f0 c~ c= * * part cnode f3 b0 * * part cnode f3 b1 c/\ c= * part cdart_of_loop f0 * * part csupport_of_sequence f1 f2 c= * part cloop_map f0 * * part csamsara f1 f2
+ (~ (((node H) (p i)) = ((node H) (p j)))), (i <= n), (j <= n) |- ((\z. ((?i'. ((i' <= n) /\ ((p i) = (p i')))) /\ ((?i. ((i <= n) /\ (z = (p i)))) /\ (~ (((node H) (p i)) = ((node H) z)))))) (p j))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c<= f2 f4 c==> c<= f3 f4 * / c/\ c? / c/\ c<= b1 f4 c= * f1 f2 * f1 b1 c/\ c? / c/\ c<= b1 f4 c= b0 * f1 b1 c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 b0 * f1 f3
+ (~ (((node H) (p i)) = ((node H) (p j)))), (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m)))), (i <= n), (j <= n), (((is_contour H) p) (SUC n)) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_contour f0 f1 cSUC f4 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
+ |- (((j <= n) /\ ((p j) = (p j))) = ((\i. ((i <= n) /\ ((p j) = (p i)))) j))
T c= c/\ c<= f0 f1 c= * f2 f0 * f2 f0 * / c/\ c<= b0 f1 c= * f2 f0 * f2 b0 f0
+ |- (((((is_inj_list p) n) ==> (((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))))) ==> (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))) = (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c= c==> c==> cis_inj_list f0 f1 c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
+ |- ((((NUMERAL _0) <= n) /\ ((p (NUMERAL _0)) = (p (NUMERAL _0)))) = ((\i. ((i <= n) /\ ((p (NUMERAL _0)) = (p i)))) (NUMERAL _0)))
T c= c/\ c<= cNUMERAL c_0 f0 c= * f1 cNUMERAL c_0 * f1 cNUMERAL c_0 * / c/\ c<= b0 f0 c= * f1 cNUMERAL c_0 * f1 b0 cNUMERAL c_0
+ ((((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) \/ (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0))))))) |- F
T c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 cF
+ |- (!r. (!x. ((((((POWER ((samsara p) n)) (SUC n)) x) = x) /\ (x = (((x DIV (SUC n)) * (SUC n)) + r))) ==> ((((POWER ((samsara p) n)) x) x) = (((POWER ((samsara p) n)) r) x)))))
T c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 f2 f2 c= f3 c+ c* cDIV f3 cSUC f1 cSUC f1 f4 c= cPOWER * * part csamsara f0 f1 f3 f2 cPOWER * * part csamsara f0 f1 f4 f2
- ((SUC n) = (NUMERAL _0)) |- ((NUMERAL _0) = (SUC n))
T c==> c= cSUC f0 cNUMERAL c_0 c= cNUMERAL c_0 cSUC f0
- |- ((?i'. t) = t)
T c= c? / f0 f0
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) /\ ((is_loop H) L))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c/\ c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 cis_loop f2 f5
+ |- (?i. ((i <= n) /\ ((p (NUMERAL _0)) = (p i))))
T c? / c/\ c<= b0 f0 c= * f1 cNUMERAL c_0 * f1 b0
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c? / c/\ cis_loop f2 b0 c/\ c= * * part cpath_of_loop b0 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f2 b1 * * part cnode f2 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f0 f1 c= * part cloop_map b0 * * part csamsara f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!m. ((p (m MOD (SUC n))) = (p m))), ((x MOD (SUC n)) <= n) |- (T = ((((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p (x MOD (SUC n))))) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c<= cMOD f2 cSUC f1 f1 c= cT c==> c==> c<= cMOD f2 cSUC f1 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 cMOD f2 cSUC f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
+ (~ (((node H) (p i)) = ((node H) (p j)))), (i <= n), (j <= n) |- (?y. (?z. ((y IN ((support_of_sequence p) n)) /\ ((z IN ((support_of_sequence p) n)) /\ (~ (((node H) y) = ((node H) z)))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c<= f2 f4 c==> c<= f3 f4 c? / c? / c/\ cIN b0 * * part csupport_of_sequence f1 f4 c/\ cIN b1 * * part csupport_of_sequence f1 f4 c~ c= * * part cnode f0 b0 * * part cnode f0 b1
+ (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) |- (((CARD ((support_of_sequence p) n)) = (SUC n)) ==> ((!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) ==> (((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) ==> (((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))) ==> (((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x)))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c<= cMOD f2 cSUC f1 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
+ ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) |- (((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) /\ (((is_inj_list p) n) ==> (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((p (NUMERAL _0)) = (p (SUC n))) ==> ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))))))))
T c==> c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 c/\ c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 c==> cis_inj_list f1 f2 c==> c= cloop c, * * part csupport_of_sequence f1 f2 * * part csamsara f1 f2 f3 c==> c= cMOD cSUC f2 cSUC f2 cNUMERAL c_0 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f2 c/\ cis_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)
T * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
+ |- ((((((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (x = (((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))) = ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c= c==> c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= f2 c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
+ |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) (loop (((support_of_sequence p) n) , ((samsara p) n)))))
T c= c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1
+ |- (~ (((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))) = (int_of_num (NUMERAL _0))))
T c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cNUMERAL c_0
- (~ (((node H) (p i)) = ((node H) (p j)))) |- (~ (((node H) (p j)) = ((node H) (p i))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c~ c= * * part cnode f0 * f1 f3 * * part cnode f0 * f1 f2
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((i <= n) /\ ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m))))))) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c/\ c<= f2 f4 c/\ c<= f3 f4 c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((i <= n) /\ ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m))))))), (i <= n) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c/\ c<= f2 f4 c/\ c<= f3 f4 c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c==> c<= f2 f4 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
+ |- (((!p. (!n. (((is_inj_list p) n) ==> ((permutes ((samsara p) n)) ((support_of_sequence p) n))))) ==> ((\p. (!n. (((is_inj_list p) n) ==> ((permutes ((samsara p) n)) ((support_of_sequence p) n))))) p)) = ((\p. (!n. (((is_inj_list p) n) ==> ((permutes ((samsara p) n)) ((support_of_sequence p) n))))) p))
T c= c==> ! ! c==> cis_inj_list b0 b1 cpermutes * * part csamsara b0 b1 * * part csupport_of_sequence b0 b1 * / ! c==> cis_inj_list b0 b1 cpermutes * * part csamsara b0 b1 * * part csupport_of_sequence b0 b1 f0 * / ! c==> cis_inj_list b0 b1 cpermutes * * part csamsara b0 b1 * * part csupport_of_sequence b0 b1 f0
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((x MOD (SUC n)) <= n), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((x MOD (SUC n)) <= n) /\ ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> c<= cMOD f2 cSUC f1 f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c/\ c<= cMOD f2 cSUC f1 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
+ |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289907)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289908)) /\ ((((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907)) \/ ((real_le ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) /\ (((real_le ((real_add (real_of_int _10289907)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289908)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le (real_of_int _10289907)) (real_of_int _10289908)))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_of_int f0 creal_of_int f1 cF
- (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) |- ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))
T c==> ! c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 c==> c<= f2 f0 c= cPOWER * * part csamsara f1 f0 f2 * f1 cNUMERAL c_0 * f1 f2
+ |- ((!n. (!i. (!j. (((~ (((node H) (p i)) = ((node H) (p j)))) /\ ((i <= n) /\ ((j <= n) /\ ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m)))))))) ==> (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))))))))) = T)
T c= ! ! ! c==> c/\ c~ c= * * part cnode f0 * f1 b1 * * part cnode f0 * f1 b2 c/\ c<= b1 b0 c/\ c<= b2 b0 c/\ cis_contour f0 f1 cSUC b0 c/\ cis_inj_list f1 b0 ! c= * f1 cMOD b3 cSUC b0 * f1 b3 c? / c/\ cis_loop f0 b3 c/\ c= * * part cpath_of_loop b3 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b3 c/\ c? / c? / c/\ cin_dart_of_loop b4 b3 c/\ cin_dart_of_loop b5 b3 c~ c= * * part cnode f0 b4 * * part cnode f0 b5 c/\ c= * part cdart_of_loop b3 * * part csupport_of_sequence f1 b0 c= * part cloop_map b3 * * part csamsara f1 b0 cT
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> c<= cMOD f2 cSUC f1 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) |- ((((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x))) = (((~ ((SUC n) = (NUMERAL _0))) ==> ((x = (((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n)))) /\ ((x MOD (SUC n)) < (SUC n)))) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x))))
T c==> c= c+ c* cDIV f0 cSUC f1 cSUC f1 cMOD f0 cSUC f1 f0 c= c==> c<= cMOD f0 cSUC f1 f1 c= cPOWER * * part csamsara f2 f1 cMOD f0 cSUC f1 * f2 cNUMERAL c_0 * f2 f0 c==> c==> c~ c= cSUC f1 cNUMERAL c_0 c/\ c= f0 c+ c* cDIV f0 cSUC f1 cSUC f1 cMOD f0 cSUC f1 c< cMOD f0 cSUC f1 cSUC f1 c= cPOWER * * part csamsara f2 f1 cMOD f0 cSUC f1 * f2 cNUMERAL c_0 * f2 f0
+ (((one_step_contour H) (p n)) (p (SUC n))) |- ((((one_step_contour H) (p n)) (p (SUC n))) = T)
T c==> cone_step_contour f0 * f1 f2 * f1 cSUC f2 c= cone_step_contour f0 * f1 f2 * f1 cSUC f2 cT
+ |- ((\r. (!x. ((((((POWER ((samsara p) n)) (SUC n)) x) = x) /\ (x = (((x DIV (SUC n)) * (SUC n)) + r))) ==> ((((POWER ((samsara p) n)) x) x) = (((POWER ((samsara p) n)) r) x))))) (x MOD (SUC n)))
T * / ! c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 b1 b1 c= f2 c+ c* cDIV f2 cSUC f1 cSUC f1 b0 c= cPOWER * * part csamsara f0 f1 f2 b1 cPOWER * * part csamsara f0 f1 b0 b1 cMOD f2 cSUC f1
+ ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))) = (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= c/\ c? / c? / c/\ cin_dart_of_loop b0 f2 c/\ cin_dart_of_loop b1 f2 c~ c= * * part cnode f3 b0 * * part cnode f3 b1 c/\ c= * part cdart_of_loop f2 * * part csupport_of_sequence f0 f1 c= * part cloop_map f2 * * part csamsara f0 f1 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 f2 c/\ c? / c? / c/\ cin_dart_of_loop b0 f2 c/\ cin_dart_of_loop b1 f2 c~ c= * * part cnode f3 b0 * * part cnode f3 b1 c/\ c= * part cdart_of_loop f2 * * part csupport_of_sequence f0 f1 c= * part cloop_map f2 * * part csamsara f0 f1
+ (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))) = ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= c/\ cin_dart_of_loop * f0 cNUMERAL c_0 f2 c/\ c? / c? / c/\ cin_dart_of_loop b0 f2 c/\ cin_dart_of_loop b1 f2 c~ c= * * part cnode f3 b0 * * part cnode f3 b1 c/\ c= * part cdart_of_loop f2 * * part csupport_of_sequence f0 f1 c= * part cloop_map f2 * * part csamsara f0 f1 c/\ c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 f2 c/\ c? / c? / c/\ cin_dart_of_loop b0 f2 c/\ cin_dart_of_loop b1 f2 c~ c= * * part cnode f3 b0 * * part cnode f3 b1 c/\ c= * part cdart_of_loop f2 * * part csupport_of_sequence f0 f1 c= * part cloop_map f2 * * part csamsara f0 f1
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num n)) ==> ((((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((int_le (int_of_num a)) (int_of_num n))) \/ ((~ ((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (~ ((int_le (int_of_num a)) (int_of_num n)))))) = ((((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((int_le (int_of_num a)) (int_of_num n))) \/ ((~ ((int_lt (int_of_num a)) ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (~ ((int_le (int_of_num a)) (int_of_num n))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c\/ c/\ cint_lt cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_le cint_of_num f1 cint_of_num f0 c/\ c~ cint_lt cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c~ cint_le cint_of_num f1 cint_of_num f0 c\/ c/\ cint_lt cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_le cint_of_num f1 cint_of_num f0 c/\ c~ cint_lt cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c~ cint_le cint_of_num f1 cint_of_num f0
- (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) |- (((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j))) = T)
T c==> ! c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 c= c==> c<= f2 f0 c= cPOWER * * part csamsara f1 f0 f2 * f1 cNUMERAL c_0 * f1 f2 cT
+ |- (((!p. (!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n))))))) ==> ((\p. (!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n))))))) p)) = ((\p. (!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n))))))) p))
T c= c==> ! ! c==> c/\ cis_inj_contour f0 b0 b1 cone_step_contour f0 * b0 b1 * b0 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence b0 b1 * * part csamsara b0 b1 * / ! c==> c/\ cis_inj_contour f0 b0 b1 cone_step_contour f0 * b0 b1 * b0 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence b0 b1 * * part csamsara b0 b1 f1 * / ! c==> c/\ cis_inj_contour f0 b0 b1 cone_step_contour f0 * b0 b1 * b0 cNUMERAL c_0 cis_loop f0 cloop c, * * part csupport_of_sequence b0 b1 * * part csamsara b0 b1 f1
+ |- (((!n. (!p. (((support_of_sequence p) n) = (GSPEC (\GEN%PVAR%5403. (?i. (((SETSPEC GEN%PVAR%5403) (i <= n)) (p i)))))))) ==> ((\n. (!p. (((support_of_sequence p) n) = (GSPEC (\GEN%PVAR%5403. (?i. (((SETSPEC GEN%PVAR%5403) (i <= n)) (p i)))))))) n)) = ((\n. (!p. (((support_of_sequence p) n) = (GSPEC (\GEN%PVAR%5403. (?i. (((SETSPEC GEN%PVAR%5403) (i <= n)) (p i)))))))) n))
T c= c==> ! ! c= * * part csupport_of_sequence b1 b0 * part cGSPEC / c? / cSETSPEC b2 c<= b3 b0 * b1 b3 * / ! c= * * part csupport_of_sequence b1 b0 * part cGSPEC / c? / cSETSPEC b2 c<= b3 b0 * b1 b3 f0 * / ! c= * * part csupport_of_sequence b1 b0 * part cGSPEC / c? / cSETSPEC b2 c<= b3 b0 * b1 b3 f0
+ (((SUC n) MOD (SUC n)) = (NUMERAL _0)) |- ((((p (NUMERAL _0)) = (p (SUC n))) ==> ((is_loop H) L)) = (((p ((SUC n) MOD (SUC n))) = (p (SUC n))) ==> ((is_loop H) L)))
T c==> c= cMOD cSUC f0 cSUC f0 cNUMERAL c_0 c= c==> c= * f1 cNUMERAL c_0 * f1 cSUC f0 cis_loop f2 f3 c==> c= * f1 cMOD cSUC f0 cSUC f0 * f1 cSUC f0 cis_loop f2 f3
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((p (NUMERAL _0)) = (p (SUC n))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((((is_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f4 c==> c= cMOD cSUC f4 cSUC f4 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c==> cis_contour f0 f1 cSUC f4 c/\ cis_contour f0 f1 f4 cone_step_contour f0 * f1 f4 * f1 cSUC f4
+ |- ((\H. (!p. (!n. (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (NUMERAL _0)))) ==> ((is_loop H) (loop (((support_of_sequence p) n) , ((samsara p) n)))))))) H)
T * / ! ! c==> c/\ cis_inj_contour b0 b1 b2 cone_step_contour b0 * b1 b2 * b1 cNUMERAL c_0 cis_loop b0 cloop c, * * part csupport_of_sequence b1 b2 * * part csamsara b1 b2 f0
- ((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L) |- (((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L) /\ (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))
T c==> * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2 c/\ * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
+ ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) |- ((((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))) = (((((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (x = (((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))))) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c= c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2 c==> c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= f2 c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((is_loop H) L)
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 cis_loop f2 f5
+ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))) |- (((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p (x MOD (SUC n)))))
T c==> ! c==> c<= b0 f0 c= cPOWER * * part csamsara f1 f0 b0 * f1 cNUMERAL c_0 * f1 b0 c==> c<= cMOD f2 cSUC f0 f0 c= cPOWER * * part csamsara f1 f0 cMOD f2 cSUC f0 * f1 cNUMERAL c_0 * f1 cMOD f2 cSUC f0
+ |- ((?i. ((i <= n) /\ ((p (NUMERAL _0)) = (p i)))) = ((p (NUMERAL _0)) IN ((support_of_sequence p) n)))
T c= c? / c/\ c<= b0 f0 c= * f1 cNUMERAL c_0 * f1 b0 cIN * f1 cNUMERAL c_0 * * part csupport_of_sequence f1 f0
+ ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))) ==> (!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x)))) = ((((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n)))) ==> (!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x)))))
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= c==> c/\ c= * part cdart_of_loop f2 * * part csupport_of_sequence f0 f1 c= * part cloop_map f2 * * part csamsara f0 f1 ! c= cPOWER * part cloop_map f2 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c==> cis_inj_list f0 f1 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= * part cloop_map cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csamsara f0 f1 ! c= cPOWER * part cloop_map f2 b0 * f0 cNUMERAL c_0 * f0 b0
+ |- ((((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))) = (((~ ((SUC n) = (NUMERAL _0))) ==> ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x)) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c= c==> c= c+ c* cDIV f0 cSUC f1 cSUC f1 cMOD f0 cSUC f1 f0 c= cPOWER * * part csamsara f2 f1 f0 * f2 cNUMERAL c_0 * f2 f0 c==> c==> c~ c= cSUC f1 cNUMERAL c_0 c= c+ c* cDIV f0 cSUC f1 cSUC f1 cMOD f0 cSUC f1 f0 c= cPOWER * * part csamsara f2 f1 f0 * f2 cNUMERAL c_0 * f2 f0
+ (!m. ((p (m MOD (SUC n))) = (p m))), ((loop_map L) = ((samsara p) n)), ((is_inj_list p) n) |- (!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= * part cloop_map f2 * * part csamsara f0 f1 c==> cis_inj_list f0 f1 ! c= cPOWER * part cloop_map f2 b0 * f0 cNUMERAL c_0 * f0 b0
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908)))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0
+ (!m. ((p (m MOD (SUC n))) = (p m))) |- ((\m. ((p (m MOD (SUC n))) = (p m))) m)
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 * / c= * f0 cMOD b0 cSUC f1 * f0 b0 f2
+ |- (!f. (!r. (!x. ((((((POWER f) (SUC n)) x) = x) /\ (x = (((x DIV (SUC n)) * (SUC n)) + r))) ==> ((((POWER f) x) x) = (((POWER f) r) x))))))
T c==> c/\ c= cPOWER f0 cSUC f1 f2 f2 c= f3 c+ c* cDIV f3 cSUC f1 cSUC f1 f4 c= cPOWER f0 f3 f2 cPOWER f0 f4 f2
+ (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((CARD ((support_of_sequence p) n)) = (SUC n)) /\ (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c/\ c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
- |- (((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)) = (((~ ((SUC n) = (NUMERAL _0))) ==> (((SUC n) MOD (SUC n)) = (NUMERAL _0))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)))
T c= c==> c= cMOD cSUC f0 cSUC f0 cNUMERAL c_0 c= * * part cpath_of_loop f1 * f2 cNUMERAL c_0 f2 c==> c==> c~ c= cSUC f0 cNUMERAL c_0 c= cMOD cSUC f0 cSUC f0 cNUMERAL c_0 c= * * part cpath_of_loop f1 * f2 cNUMERAL c_0 f2
- (((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0))) /\ (((real_add (real_of_int _10289919)) (real_of_num (NUMERAL (BIT1 _0)))) = (real_of_num (NUMERAL _0)))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_int _10289919))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
+ |- (((!L. (!x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x))))) ==> ((\L. (!x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x))))) L)) = ((\L. (!x. (!k. ((((path_of_loop L) x) k) = (((POWER (loop_map L)) k) x))))) L))
T c= c==> ! ! ! c= cpath_of_loop b0 b1 b2 cPOWER * part cloop_map b0 b2 b1 * / ! ! c= cpath_of_loop b0 b1 b2 cPOWER * part cloop_map b0 b2 b1 f0 * / ! ! c= cpath_of_loop b0 b1 b2 cPOWER * part cloop_map b0 b2 b1 f0
+ |- (((!g. ((f = g) = (!x. ((f x) = (g x))))) ==> ((\g. ((f = g) = (!x. ((f x) = (g x))))) g)) = ((\g. ((f = g) = (!x. ((f x) = (g x))))) g))
T c= c==> ! c= c= f0 b0 ! c= * f0 b1 * b0 b1 * / c= c= f0 b0 ! c= * f0 b1 * b0 b1 f1 * / c= c= f0 b0 ! c= * f0 b1 * b0 b1 f1
- |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0
- |- ((((~ ((SUC n) = (NUMERAL _0))) ==> (((SUC n) MOD (SUC n)) = (NUMERAL _0))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)) = (((path_of_loop L) (p (NUMERAL _0))) = p))
T c= c==> c==> c~ c= cSUC f0 cNUMERAL c_0 c= cMOD cSUC f0 cSUC f0 cNUMERAL c_0 c= * * part cpath_of_loop f1 * f2 cNUMERAL c_0 f2 c= * * part cpath_of_loop f1 * f2 cNUMERAL c_0 f2
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
+ |- ((\p. (!n. (((is_inj_list p) n) ==> ((CARD ((support_of_sequence p) n)) = (SUC n))))) p)
T * / ! c==> cis_inj_list b0 b1 c= cCARD * * part csupport_of_sequence b0 b1 cSUC b1 f0
+ ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n)))) ==> ((p (NUMERAL _0)) IN (dart_of_loop L)))
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> c==> cis_inj_list f0 f1 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= * part cloop_map cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csamsara f0 f1 cIN * f0 cNUMERAL c_0 * part cdart_of_loop f2
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) |- ((\m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) m)
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 * / ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 f0
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. (!n. ((~ (n = (NUMERAL _0))) ==> ((((m DIV n) * n) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* cDIV b0 b1 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
+ |- ((((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))) ==> ((p (NUMERAL _0)) IN (dart_of_loop L)))
T c==> c/\ c= * part cdart_of_loop f0 * * part csupport_of_sequence f1 f2 c= * part cloop_map f0 * * part csamsara f1 f2 cIN * f1 cNUMERAL c_0 * part cdart_of_loop f0
- |- ((?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))
T c==> c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
+ ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))) ==> ((p (NUMERAL _0)) IN (dart_of_loop L))) = ((((is_inj_list p) n) ==> (((dart_of_loop (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((support_of_sequence p) n)) /\ ((loop_map (loop (((support_of_sequence p) n) , ((samsara p) n)))) = ((samsara p) n)))) ==> ((p (NUMERAL _0)) IN (dart_of_loop L))))
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= c==> c/\ c= * part cdart_of_loop f2 * * part csupport_of_sequence f0 f1 c= * part cloop_map f2 * * part csamsara f0 f1 cIN * f0 cNUMERAL c_0 * part cdart_of_loop f2 c==> c==> cis_inj_list f0 f1 c/\ c= * part cdart_of_loop cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= * part cloop_map cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 * * part csamsara f0 f1 cIN * f0 cNUMERAL c_0 * part cdart_of_loop f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((permutes ((samsara p) n)) ((support_of_sequence p) n)) = T)
T c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 cT
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n) |- (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 f5 c/\ c? / c? / c/\ cin_dart_of_loop b0 f5 c/\ cin_dart_of_loop b1 f5 c~ c= * * part cnode f0 b0 * * part cnode f0 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f1 f4 c= * part cloop_map f5 * * part csamsara f1 f4
+ (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((\L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n)))))))) L)
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 * / c/\ cis_loop f2 b0 c/\ c= * * part cpath_of_loop b0 * f0 cNUMERAL c_0 f0 c/\ cin_dart_of_loop * f0 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f2 b1 * * part cnode f2 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f0 f1 c= * part cloop_map b0 * * part csamsara f0 f1 f5
+ |- (((((is_inj_list p) n) ==> ((permutes ((samsara p) n)) ((support_of_sequence p) n))) ==> (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))) = (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x))))
T c= c==> c==> cis_inj_list f0 f1 cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((((is_contour H) p) (SUC n)) /\ (((is_inj_list p) n) /\ (!m. ((p (m MOD (SUC n))) = (p m))))), (i <= n), (j <= n) |- (?L. (((is_loop H) L) /\ ((((path_of_loop L) (p (NUMERAL _0))) = p) /\ (((in_dart_of_loop (p (NUMERAL _0))) L) /\ ((?y. (?z. (((in_dart_of_loop y) L) /\ (((in_dart_of_loop z) L) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c/\ cis_contour f0 f1 cSUC f4 c/\ cis_inj_list f1 f4 ! c= * f1 cMOD b0 cSUC f4 * f1 b0 c==> c<= f2 f4 c==> c<= f3 f4 c? / c/\ cis_loop f0 b0 c/\ c= * * part cpath_of_loop b0 * f1 cNUMERAL c_0 f1 c/\ cin_dart_of_loop * f1 cNUMERAL c_0 b0 c/\ c? / c? / c/\ cin_dart_of_loop b1 b0 c/\ cin_dart_of_loop b2 b0 c~ c= * * part cnode f0 b1 * * part cnode f0 b2 c/\ c= * part cdart_of_loop b0 * * part csupport_of_sequence f1 f4 c= * part cloop_map b0 * * part csamsara f1 f4
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n) |- ((?y. (?z. ((y IN (dart_of_loop L)) /\ ((z IN (dart_of_loop L)) /\ (~ (((node H) y) = ((node H) z))))))) /\ (((dart_of_loop L) = ((support_of_sequence p) n)) /\ ((loop_map L) = ((samsara p) n))))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c/\ c? / c? / c/\ cIN b0 * part cdart_of_loop f5 c/\ cIN b1 * part cdart_of_loop f5 c~ c= * * part cnode f0 b0 * * part cnode f0 b1 c/\ c= * part cdart_of_loop f5 * * part csupport_of_sequence f1 f4 c= * part cloop_map f5 * * part csamsara f1 f4
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x) ==> ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 * f0 f2
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))
T creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((~ (m = (NUMERAL _0))) ==> ((m MOD m) = (NUMERAL _0))) = T)
T c= c==> c~ c= f0 cNUMERAL c_0 c= cMOD f0 f0 cNUMERAL c_0 cT
+ |- ((((real_ge x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_add f0 f1 creal_of_num cNUMERAL c_0
+ ((is_inj_list p) n) |- (((((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j))))) ==> (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))) = ((((is_inj_list p) n) ==> (((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))))) ==> (!x. ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (p x)))))
T c==> cis_inj_list f0 f1 c= c==> c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c==> cis_inj_list f0 f1 c/\ c= cPOWER * * part csamsara f0 f1 cSUC f1 * f0 cNUMERAL c_0 * f0 cNUMERAL c_0 ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 ! c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0
+ (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- (((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))) ==> (((x MOD (SUC n)) <= n) ==> ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x))))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c<= cMOD f2 cSUC f1 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
+ |- (((!H. (!p. (!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))))) ==> ((\H. (!p. (!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))))) H)) = ((\H. (!p. (!n. ((((is_inj_contour H) p) n) = ((((is_contour H) p) n) /\ ((is_inj_list p) n)))))) H))
T c= c==> ! ! ! c= cis_inj_contour b0 b1 b2 c/\ cis_contour b0 b1 b2 cis_inj_list b1 b2 * / ! ! c= cis_inj_contour b0 b1 b2 c/\ cis_contour b0 b1 b2 cis_inj_list b1 b2 f0 * / ! ! c= cis_inj_contour b0 b1 b2 c/\ cis_contour b0 b1 b2 cis_inj_list b1 b2 f0
- |- ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)
T * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
+ |- ((!x. ((((POWER (loop_map L)) x) (p (NUMERAL _0))) = (p x))) = (((path_of_loop L) (p (NUMERAL _0))) = p))
T c= ! c= cPOWER * part cloop_map f0 b0 * f1 cNUMERAL c_0 * f1 b0 c= * * part cpath_of_loop f0 * f1 cNUMERAL c_0 f1
+ (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0
+ |- (((!n'. (!m. (!f. (!r. (!x. ((((((POWER f) n') x) = x) /\ (m = (((x DIV (SUC n)) * n') + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x)))))))) ==> ((\n'. (!m. (!f. (!r. (!x. ((((((POWER f) n') x) = x) /\ (m = (((x DIV (SUC n)) * n') + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x)))))))) (SUC n))) = ((\n'. (!m. (!f. (!r. (!x. ((((((POWER f) n') x) = x) /\ (m = (((x DIV (SUC n)) * n') + r))) ==> ((((POWER f) m) x) = (((POWER f) r) x)))))))) (SUC n)))
T c= c==> ! ! ! ! ! c==> c/\ c= cPOWER b2 b0 b4 b4 c= b1 c+ c* cDIV f0 cSUC f1 b0 b3 c= cPOWER b2 b1 b4 cPOWER b2 b3 b4 * / ! ! ! ! c==> c/\ c= cPOWER b2 b0 b4 b4 c= b1 c+ c* cDIV f0 cSUC f1 b0 b3 c= cPOWER b2 b1 b4 cPOWER b2 b3 b4 cSUC f1 * / ! ! ! ! c==> c/\ c= cPOWER b2 b0 b4 b4 c= b1 c+ c* cDIV f0 cSUC f1 b0 b3 c= cPOWER b2 b1 b4 cPOWER b2 b3 b4 cSUC f1
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((\p. (!n. (((is_inj_list p) n) ==> (((((POWER ((samsara p) n)) (SUC n)) (p (NUMERAL _0))) = (p (NUMERAL _0))) /\ (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))))))) p)
T * / ! c==> cis_inj_list b0 b1 c/\ c= cPOWER * * part csamsara b0 b1 cSUC b1 * b0 cNUMERAL c_0 * b0 cNUMERAL c_0 ! c==> c<= b2 b1 c= cPOWER * * part csamsara b0 b1 b2 * b0 cNUMERAL c_0 * b0 b2 f0
+ (~ (((node H) (p i)) = ((node H) (p j)))) |- ((((node H) (p i)) = ((node H) (p j))) = F)
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c= c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 cF
+ (~ (((node H) (p i)) = ((node H) (p j)))), ((p (NUMERAL _0)) = (p (SUC n))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- ((is_loop H) L)
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c==> c= * f1 cNUMERAL c_0 * f1 cSUC f4 c==> c= cMOD cSUC f4 cSUC f4 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f1 f4 * * part csamsara f1 f4 f5 c==> c==> c/\ cis_inj_contour f0 f1 f4 cone_step_contour f0 * f1 f4 * f1 cSUC f4 cis_loop f0 f5 c==> c<= f2 f4 c==> c<= f3 f4 c==> cis_inj_list f1 f4 c==> cis_contour f0 f1 cSUC f4 cis_loop f0 f5
+ |- ((m <= n) = ((int_le (int_of_num m)) (int_of_num n)))
T c= c<= f0 f1 cint_le cint_of_num f0 cint_of_num f1
- (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- |- ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))
T c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0))) /\ (((real_add (real_of_int _10289919)) (real_of_num (NUMERAL (BIT1 _0)))) = (real_of_num (NUMERAL _0)))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_int _10289919))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_int _10289919))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) |- ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> c~ c= f0 cNUMERAL c_0 c= c+ c* f0 cDIV f1 f0 cMOD f1 f0 f1
- (!m. ((p (m MOD (SUC n))) = (p m))), ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((!m. ((p (m MOD (SUC n))) = (p m))) /\ (((path_of_loop L) (p (SUC n))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c/\ ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c= * * part cpath_of_loop f2 * f0 cSUC f1 f0
- ((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) |- ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) ==> ((is_loop H) L))
T c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 c==> c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 cis_loop f0 f3
- ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((!m. ((p (m MOD (SUC n))) = (p m))) ==> (((path_of_loop L) (p (SUC n))) = p))
T c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c= * * part cpath_of_loop f2 * f0 cSUC f1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((is_contour H) p) (NUMERAL _0)) = T)
T c= cis_contour f0 f1 cNUMERAL c_0 cT
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289919)) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0
- (~ (((node H) (p i)) = ((node H) (p j)))) |- ((((node H) (p j)) = ((node H) (p i))) = F)
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c= c= * * part cnode f0 * f1 f3 * * part cnode f0 * f1 f2 cF
- |- (F = (~ (((int_le (int_of_num (NUMERAL _0))) _10289925) ==> ((int_le (int_of_num (NUMERAL _0))) _10289925))))
T c= cF c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 cint_le cint_of_num cNUMERAL c_0 f0
- (!m. ((p (m MOD (SUC n))) = (p m))), ((p (NUMERAL _0)) = (p (SUC n))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((path_of_loop L) (p (SUC n))) = p)
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= * * part cpath_of_loop f2 * f0 cSUC f1 f0
- (((SUC n) MOD (SUC n)) = (NUMERAL _0)) |- ((((p (NUMERAL _0)) = (p (SUC n))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)) = (((p ((SUC n) MOD (SUC n))) = (p (SUC n))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)))
T c==> c= cMOD cSUC f0 cSUC f0 cNUMERAL c_0 c= c==> c= * f1 cNUMERAL c_0 * f1 cSUC f0 c= * * part cpath_of_loop f2 * f1 cNUMERAL c_0 f1 c==> c= * f1 cMOD cSUC f0 cSUC f0 * f1 cSUC f0 c= * * part cpath_of_loop f2 * f1 cNUMERAL c_0 f1
- |- (((!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) ==> ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)) = ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x))
T c= c==> ! c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1 * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
- (!m. ((p (m MOD (SUC n))) = (p m))) |- ((((p ((SUC n) MOD (SUC n))) = (p (SUC n))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p)) = (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c= c==> c= * f0 cMOD cSUC f1 cSUC f1 * f0 cSUC f1 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- |- (((!p. (!x. ((x IN (\y. (p y))) = (p x)))) ==> ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)) = ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 / * b0 b2 * b0 b1 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908)))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908)))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0
- |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) = ((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L))
T c= c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2
- (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) /\ ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> ((is_loop H) L)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c/\ c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 cis_loop f2 f5
- (((is_contour H) p) (SUC n)) |- ((((is_contour H) p) (SUC n)) = T)
T c==> cis_contour f0 f1 cSUC f2 c= cis_contour f0 f1 cSUC f2 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL _0) <= n) = T)
T c= c<= cNUMERAL c_0 f0 cT
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) |- (((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)) = T)
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c= c==> c~ c= f0 cNUMERAL c_0 c= c+ c* f0 cDIV f1 f0 cMOD f1 f0 f1 cT
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) |- ((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L)
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2
- (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((p (NUMERAL _0)) = (p (SUC n))) ==> (((path_of_loop L) (p (SUC n))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c= * * part cpath_of_loop f2 * f0 cSUC f1 f0
- (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((~ ((SUC n) = (NUMERAL _0))) ==> (((SUC n) MOD (SUC n)) = (NUMERAL _0))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> c==> c~ c= cSUC f1 cNUMERAL c_0 c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0
- (!m. ((p (m MOD (SUC n))) = (p m))), (~ (((node H) (p i)) = ((node H) (p j)))), (i <= n), (j <= n), ((is_inj_list p) n), (((is_contour H) p) (SUC n)) |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) ==> ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) ==> ((is_loop H) L)))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c~ c= * * part cnode f2 * f0 f3 * * part cnode f2 * f0 f4 c==> c<= f3 f1 c==> c<= f4 f1 c==> cis_inj_list f0 f1 c==> cis_contour f2 f0 cSUC f1 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f5 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 cis_loop f2 f5
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((~ T) = F)
T c= c~ cT cF
- |- (((!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) ==> ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)) = ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x))
T c= c==> ! c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
- |- (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))
T c= cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 f1 * f0 f1
- |- ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)
T * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) |- (((loop (((support_of_sequence p) n) , ((samsara p) n))) = L) /\ (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))
T c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c/\ c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
- ((NUMERAL _0) = (SUC n)) |- ((SUC n) = (NUMERAL _0))
T c==> c= cNUMERAL c_0 cSUC f0 c= cSUC f0 cNUMERAL c_0
- |- (!L. (((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L))))
T c==> * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
- ((p (NUMERAL _0)) = (p (SUC n))) |- ((p (SUC n)) = (p (NUMERAL _0)))
T c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c= * f0 cSUC f1 * f0 cNUMERAL c_0
- |- (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- ((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))), (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) |- (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) /\ ((is_loop H) L))
T c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 c==> c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 c/\ c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3
- |- (((!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) ==> ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)) = ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x))
T c= c==> ! c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!m. ((p (m MOD (SUC n))) = (p m))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- ((((SUC n) MOD (SUC n)) = (NUMERAL _0)) /\ (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c/\ c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) L) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L))) = T)
T c= c==> * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 f2 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 cT
- (~ (((node H) (p i)) = ((node H) (p j)))) |- (((~ (((node H) (p j)) = ((node H) (p i)))) ==> ((((node H) (p j)) = ((node H) (p i))) = F)) = ((((node H) (p j)) = ((node H) (p i))) = F))
T c==> c~ c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c= c==> c~ c= * * part cnode f0 * f1 f3 * * part cnode f0 * f1 f2 c= c= * * part cnode f0 * f1 f3 * * part cnode f0 * f1 f2 cF c= c= * * part cnode f0 * f1 f3 * * part cnode f0 * f1 f2 cF
- |- ((x IN (\y. (p y))) = (p x))
T c= cIN f0 / * f1 b0 * f1 f0
- |- (~ ((NUMERAL _0) = (SUC n)))
T c~ c= cNUMERAL c_0 cSUC f0
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) ==> (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)))
T c==> c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3
- (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) |- ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) = T)
T c==> c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 c= c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 cT
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- ((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (((node H) (p j)) = ((node H) (p i))) |- (((node H) (p i)) = ((node H) (p j)))
T c==> c= * * part cnode f0 * f1 f2 * * part cnode f0 * f1 f3 c= * * part cnode f0 * f1 f3 * * part cnode f0 * f1 f2
- (((real_ge (real_of_int _10289907)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289908)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289907))) (real_of_int _10289908))) (real_of_num (NUMERAL _0)))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289907)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289908))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) |- ((((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)) /\ (((((is_inj_contour H) p) n) /\ (((one_step_contour H) (p n)) (p (SUC n)))) ==> ((is_loop H) L)))
T c==> c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 c/\ c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3 c==> c/\ cis_inj_contour f0 f1 f2 cone_step_contour f0 * f1 f2 * f1 cSUC f2 cis_loop f0 f3
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- (!m. ((p (m MOD (SUC n))) = (p m))), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((p (NUMERAL _0)) = (p (SUC n))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> c= * f0 cNUMERAL c_0 * f0 cSUC f1 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) ==> ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)) = ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0 * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
- |- (((~ ((NUMERAL _0) = (SUC n))) ==> (((NUMERAL _0) = (SUC n)) = F)) = (((NUMERAL _0) = (SUC n)) = F))
T c= c==> c~ c= cNUMERAL c_0 cSUC f0 c= c= cNUMERAL c_0 cSUC f0 cF c= c= cNUMERAL c_0 cSUC f0 cF
- |- (((\t. (f t)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))), (!m. ((p (m MOD (SUC n))) = (p m))), (!j. ((j <= n) ==> ((((POWER ((samsara p) n)) j) (p (NUMERAL _0))) = (p j)))), ((((POWER ((samsara p) n)) x) (p (NUMERAL _0))) = (((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0)))), ((CARD ((support_of_sequence p) n)) = (SUC n)), ((((x DIV (SUC n)) * (SUC n)) + (x MOD (SUC n))) = x), ((x MOD (SUC n)) <= n), ((permutes ((samsara p) n)) ((support_of_sequence p) n)) |- ((((POWER ((samsara p) n)) (x MOD (SUC n))) (p (NUMERAL _0))) = (p x))
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> ! c==> c<= b0 f1 c= cPOWER * * part csamsara f0 f1 b0 * f0 cNUMERAL c_0 * f0 b0 c==> c= cPOWER * * part csamsara f0 f1 f2 * f0 cNUMERAL c_0 cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 c==> c= cCARD * * part csupport_of_sequence f0 f1 cSUC f1 c==> c= c+ c* cDIV f2 cSUC f1 cSUC f1 cMOD f2 cSUC f1 f2 c==> c<= cMOD f2 cSUC f1 f1 c==> cpermutes * * part csamsara f0 f1 * * part csupport_of_sequence f0 f1 c= cPOWER * * part csamsara f0 f1 cMOD f2 cSUC f1 * f0 cNUMERAL c_0 * f0 f2
- |- (((!x. (((\L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) x) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))) ==> ((?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)))) = ((?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L)) ==> (?L. ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L))))
T c= c==> ! c==> * / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b1 b0 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b1 c==> c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 c==> c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0 c? / c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 b0
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((int_le (int_of_num (NUMERAL _0))) _10289925) ==> ((int_le (int_of_num (NUMERAL _0))) _10289925))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 cint_le cint_of_num cNUMERAL c_0 f0
- |- (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))
T c= cGSPEC / * f0 * part cSETSPEC b0 f1 * f0 / / c/\ b0 c= f1 b1
- (!m. (!n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m)))) |- ((\n. ((~ (n = (NUMERAL _0))) ==> (((n * (m DIV n)) + (m MOD n)) = m))) n)
T c==> ! ! c==> c~ c= b1 cNUMERAL c_0 c= c+ c* b1 cDIV b0 b1 cMOD b0 b1 b0 * / c==> c~ c= b0 cNUMERAL c_0 c= c+ c* b0 cDIV f0 b0 cMOD f0 b0 f0 f1
- (!m. ((p (m MOD (SUC n))) = (p m))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((path_of_loop L) (p (NUMERAL _0))) = p)
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- |- (((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) ==> ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)) = ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p))
T c= c==> ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)
T * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((x IN (GSPEC (\GEN%PVAR%5403. (?i. (((SETSPEC GEN%PVAR%5403) (p i)) i))))) = (p x))
T c= cIN f0 * part cGSPEC / c? / cSETSPEC b0 * f1 b1 b1 * f1 f0
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!x. ((x IN (\y. (p y))) = (p x))) ==> ((\x. ((x IN (\y. (p y))) = (p x))) x)) = ((\x. ((x IN (\y. (p y))) = (p x))) x))
T c= c==> ! c= cIN b0 / * f0 b1 * f0 b0 * / c= cIN b0 / * f0 b1 * f0 b0 f1 * / c= cIN b0 / * f0 b1 * f0 b0 f1
- (!m. ((p (m MOD (SUC n))) = (p m))), (((SUC n) MOD (SUC n)) = (NUMERAL _0)), ((loop (((support_of_sequence p) n) , ((samsara p) n))) = L), ((is_inj_list p) n) |- (((p ((SUC n) MOD (SUC n))) = (p (SUC n))) ==> (((path_of_loop L) (p (NUMERAL _0))) = p))
T c==> ! c= * f0 cMOD b0 cSUC f1 * f0 b0 c==> c= cMOD cSUC f1 cSUC f1 cNUMERAL c_0 c==> c= cloop c, * * part csupport_of_sequence f0 f1 * * part csamsara f0 f1 f2 c==> cis_inj_list f0 f1 c==> c= * f0 cMOD cSUC f1 cSUC f1 * f0 cSUC f1 c= * * part cpath_of_loop f2 * f0 cNUMERAL c_0 f0
- |- ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
